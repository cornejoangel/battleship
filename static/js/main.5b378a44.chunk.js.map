{"version":3,"sources":["modules/Constants.js","components/Tile.js","components/Grid.js","components/ShipTile.js","components/Battleship.js","components/PlacementGrid.js","components/ResetButton.js","components/InfoButton.js","components/RandomButton.js","components/MessageBox.js","components/StartButton.js","components/ShipTray.js","modules/Ship.js","modules/Gameboard.js","modules/Game.js","modules/SetupShips.js","App.js","index.js"],"names":["ItemTypes","Tile","props","type","x","y","name","player","attack","moveShip","canDropShip","recentX","recentY","recentHit","useDrop","accept","drop","item","canDrop","collect","monitor","isOver","className","onClick","e","ref","style","gridColumn","gridRow","Grid","tileSet","tiles","i","j","tile","found","find","t","concat","map","ShipTile","rotateShip","model","front","role","tabIndex","Battleship","length","orientation","inTray","useDrag","isDragging","drag","shipTiles","shipCoords","push","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","PlacementGrid","gridShips","grid","ship","ResetButton","reset","InfoButton","useState","showModal","setShowModal","closeInfo","isOpen","shouldCloseOnOverlayClick","shouldCloseOnEsc","onRequestClose","overlayClassName","portalClassName","RandomButtom","randomShips","MessageBox","playerResult","AIResult","gameOver","StartButton","startGame","ShipTray","trayShips","Ship","len","hp","getLength","getHP","takeHit","isSunk","Gameboard","ships","checkShipLocation","coords","shipCount","addShip","s","removeShip","tileCount","filter","removeModel","receiveAttack","coord","sunk","undefined","getTiles","Game","playerOneBoard","playerTwoBoard","playerOneShips","playerTwoShips","checkGameOver","move","result","placeShips","removeShipModel","checkLocation","smartMove","direction","searchingFrom","newCoords","newDirection","newSearching","newRecent","Object","assign","console","log","getPOneBoard","getPTwoBoard","resetPlayerOne","resetPlayerTwo","SetupShips","orientations","Math","round","random","App","game","setPlayerOneBoard","setPlayerTwoBoard","placing","setPlacing","setTrayShips","setGridShips","setPlayerResult","setAIResult","setGameOver","AIDirection","setAIDirection","AISearchingFrom","setAISearchingFrom","AIRecentHit","setAIRecentHit","setRecentX","setRecentY","trayRef","useRef","gridRef","current","directionRef","searchingRef","recentRef","getRandomCoordinates","floor","buildShip","shipData","tempX","tempY","getOrientation","inGrid","temp","prevShips","tempShip","preventDefault","tempTray","tempGrid","originalOrientation","originalShip","potentialRotation","setRandomShipLocations","addedShips","notAdded","DndProvider","backend","HTML5Backend","potentialShip","getShipByModel","randomizedShips","aiResult","gameOverStatus","newX","newY","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b378a44.chunk.js","sourcesContent":["export const ItemTypes = {\n  SHIP: 'ship',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDrop } from 'react-dnd';\nimport { ItemTypes } from '../modules/Constants';\nimport '../styles/Tile.css';\n\nconst Tile = (props) => {\n  const {\n    type,\n    x,\n    y,\n    name,\n    player,\n    attack,\n    moveShip,\n    canDropShip,\n    recentX,\n    recentY,\n  } = props;\n  const recentHit = x === recentX && y === recentY;\n\n  const [{ isOver }, drop] = useDrop(\n    () => ({\n      accept: ItemTypes.SHIP,\n      drop: (item) => moveShip(x, y, item),\n      canDrop: (item) => canDropShip(x, y, item),\n      collect: (monitor) => ({\n        isOver: !!monitor.isOver(),\n      }),\n    }),\n    [x, y]\n  );\n\n  let tile = null;\n  if (name === 'enemy') {\n    tile = (\n      <button\n        type=\"button\"\n        className={`tile enemy-tile ${type} ${recentHit ? 'recent-hit' : ''}`}\n        onClick={(e) => attack(e, player, { x, y })}\n      >\n        {/* {x}, {y} */}\n      </button>\n    );\n  } else {\n    tile = (\n      <button\n        type=\"button\"\n        className={`tile ${type} ${recentHit ? 'recent-hit' : ''} ${\n          isOver ? 'is-over' : ''\n        }`}\n        ref={drop}\n        style={{\n          gridColumn: x + 1,\n          gridRow: y + 1,\n        }}\n      >\n        {/* {x}, {y} */}\n      </button>\n    );\n  }\n\n  return tile;\n};\n\nTile.propTypes = {\n  type: PropTypes.string,\n  x: PropTypes.number,\n  y: PropTypes.number,\n  name: PropTypes.string,\n  player: PropTypes.number,\n  attack: PropTypes.func,\n  moveShip: PropTypes.func,\n  canDropShip: PropTypes.func,\n  recentX: PropTypes.number,\n  recentY: PropTypes.number,\n};\n\nexport default Tile;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Tile from './Tile';\nimport '../styles/Grid.css';\n\nconst Grid = (props) => {\n  const { player, name, tileSet, attack, moveShip, recentX, recentY } = props;\n\n  let tiles = [];\n  for (let i = 0; i < 10; i += 1) {\n    for (let j = 0; j < 10; j += 1) {\n      const tile = { x: j, y: i };\n      const found = tileSet.find((t) => t.x === j && t.y === i);\n      if (found) {\n        tile.type = found.type;\n      } else {\n        tile.type = '';\n      }\n      tiles = tiles.concat(tile);\n    }\n  }\n\n  /*\n  Grid's conditional render:\n\n  There are two players and each player has two kinds of grids\n    Their 'friendly' grid\n    Their 'enemy' grid\n\n  There are also 4 types of tile - 'ship', 'miss', 'hit', '' (blank)\n  \n  A player's friendly grid shows their own ships and the result of any attacks the enemy has made (all tile types).\n\n  A player's enemy grid shows only the results of their own attacks (no ship tiles).\n  Furthermore, when a player makes an attack, they do so by clicking on their enemy grid\n\n  So enemy grids need:\n    to show tile types but...\n    to NOT show ship types\n    to pass along the attack function\n  \n  And friendly grids only need:\n    to show all tile types\n\n  With all that in mind, lets address the following block of code:\n  It just checks if it is making a friendly or enemy board\n  Friendly boards don't get the attack function\n  Enemy boards have their 'ship' tiles changed to '' (blank) tiles\n  Unfortunately that has to happen in an ugly if/else block inside of the mapping\n  */\n\n  let grid = null;\n  if (name === 'enemy') {\n    grid = (\n      <div className={`grid ${name} player${player}`}>\n        {tiles.map((tile) => {\n          let t = null;\n          if (tile.type === 'ship') {\n            t = (\n              <Tile\n                type=\"\"\n                x={tile.x}\n                y={tile.y}\n                name={name}\n                player={player}\n                key={`${tile.x}${tile.y}`}\n                attack={attack}\n              />\n            );\n          } else {\n            t = (\n              <Tile\n                type={tile.type}\n                x={tile.x}\n                y={tile.y}\n                name={name}\n                player={player}\n                key={`${tile.x}${tile.y}`}\n                attack={attack}\n              />\n            );\n          }\n          return t;\n        })}\n      </div>\n    );\n  } else {\n    grid = (\n      <div className={`grid ${name} player${player}`}>\n        {tiles.map((tile) => (\n          <Tile\n            type={tile.type}\n            x={tile.x}\n            y={tile.y}\n            name={name}\n            moveShip={moveShip}\n            recentX={recentX}\n            recentY={recentY}\n            key={`${tile.x}${tile.y}`}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  return grid;\n};\n\nGrid.propTypes = {\n  player: PropTypes.number,\n  name: PropTypes.string,\n  tileSet: PropTypes.array,\n  attack: PropTypes.func,\n  moveShip: PropTypes.func,\n  recentX: PropTypes.number,\n  recentY: PropTypes.number,\n};\n\nexport default Grid;\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/Tile.css';\nimport '../styles/ShipTile.css';\n\nconst ShipTile = (props) => {\n  const { x, y, rotateShip, model, front } = props;\n  let tile = null;\n  tile = (\n    <div\n      type=\"button\"\n      role=\"button\"\n      tabIndex={0}\n      onClick={(e) => rotateShip(e, model)}\n      className={`tile ship ship-tile ${front ? 'front' : 'back'}`}\n    >\n      {/* {x}, {y} */}\n    </div>\n  );\n\n  return tile;\n};\n\nShipTile.propTypes = {\n  type: PropTypes.string,\n  x: PropTypes.number,\n  y: PropTypes.number,\n  rotateShip: PropTypes.func,\n  model: PropTypes.string,\n  front: PropTypes.bool,\n};\n\nexport default ShipTile;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDrag } from 'react-dnd';\nimport { ItemTypes } from '../modules/Constants';\nimport ShipTile from './ShipTile';\nimport '../styles/Battleship.css';\n\nconst Battleship = (props) => {\n  const { moveShip, rotateShip, x, y, length, orientation, model, inTray } =\n    props;\n  const [{ isDragging }, drag] = useDrag(() => ({\n    type: ItemTypes.SHIP,\n    item: {\n      length,\n      model,\n    },\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n  }));\n\n  const shipTiles = [];\n  const shipCoords = {};\n  shipTiles.push(\n    <ShipTile\n      x={x}\n      y={y}\n      moveShip={moveShip}\n      rotateShip={rotateShip}\n      model={model}\n      // eslint-disable-next-line react/jsx-boolean-value\n      front={true}\n      key={`${x}${y}`}\n    />\n  );\n  for (let i = 1; i < length; i += 1) {\n    if (orientation === 'horizontal') {\n      shipCoords.x = x + i;\n      shipCoords.y = y;\n    } else {\n      shipCoords.x = x;\n      shipCoords.y = y + i;\n    }\n    shipTiles.push(\n      <ShipTile\n        x={shipCoords.x}\n        y={shipCoords.y}\n        moveShip={moveShip}\n        rotateShip={rotateShip}\n        model={model}\n        front={false}\n        key={`${shipCoords.x}${shipCoords.y}`}\n      />\n    );\n  }\n\n  /*\n  The addition of the dragging class (sets negative z-index) allows the user to \n  drag the ship onto a location that was previously held by the ship, otherwise \n  the same ship would be interpreted as the drop target and since ships are not \n  droppable the drop would be rejected\n  */\n  let ship = null;\n  if (orientation === 'horizontal') {\n    ship = (\n      <div\n        className={`battleship horizontal ${inTray ? `${model}` : ''} ${\n          isDragging ? 'dragging' : ''\n        }`}\n        ref={drag}\n        style={{\n          gridColumnStart: x + 1,\n          gridColumnEnd: x + 1 + length,\n          gridRowStart: y + 1,\n        }}\n      >\n        {shipTiles}\n      </div>\n    );\n  } else {\n    ship = (\n      <div\n        className={`battleship vertical ${inTray ? `${model}` : ''} ${\n          isDragging ? 'dragging' : ''\n        }`}\n        ref={drag}\n        style={{\n          gridColumnStart: x + 1,\n          gridRowStart: y + 1,\n          gridRowEnd: y + 1 + length,\n        }}\n      >\n        {shipTiles}\n      </div>\n    );\n  }\n\n  return ship;\n};\n\nBattleship.propTypes = {\n  moveShip: PropTypes.func,\n  rotateShip: PropTypes.func,\n  x: PropTypes.number,\n  y: PropTypes.number,\n  length: PropTypes.number,\n  orientation: PropTypes.string,\n  model: PropTypes.string,\n  inTray: PropTypes.bool,\n};\n\nexport default Battleship;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Tile from './Tile';\nimport Battleship from './Battleship';\nimport '../styles/Grid.css';\n\nconst PlacementGrid = (props) => {\n  const { moveShip, rotateShip, gridShips, canDropShip } = props;\n\n  let tiles = [];\n  for (let i = 0; i < 10; i += 1) {\n    for (let j = 0; j < 10; j += 1) {\n      const tile = { x: j, y: i };\n      tiles = tiles.concat(tile);\n    }\n  }\n\n  let grid = null;\n  grid = (\n    <div className=\"grid friendly player1\">\n      {tiles.map((tile) => (\n        <Tile\n          type=\"\"\n          x={tile.x}\n          y={tile.y}\n          name=\"\"\n          player={1}\n          key={`${tile.x}${tile.y}`}\n          moveShip={moveShip}\n          canDropShip={canDropShip}\n        />\n      ))}\n      {gridShips.map((ship) => (\n        <Battleship\n          moveShip={moveShip}\n          rotateShip={rotateShip}\n          x={ship.x}\n          y={ship.y}\n          length={ship.length}\n          orientation={ship.orientation}\n          model={ship.model}\n          key={`${ship.x}${ship.y}`}\n        />\n      ))}\n    </div>\n  );\n\n  return grid;\n};\n\nPlacementGrid.propTypes = {\n  moveShip: PropTypes.func,\n  rotateShip: PropTypes.func,\n  gridShips: PropTypes.array,\n  canDropShip: PropTypes.func,\n};\n\nexport default PlacementGrid;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/ResetButton.css';\n\nconst ResetButton = (props) => {\n  const { reset } = props;\n  return (\n    <button type=\"button\" className=\"reset\" onClick={reset}>\n      RESET\n    </button>\n  );\n};\n\nResetButton.propTypes = {\n  reset: PropTypes.func,\n};\n\nexport default ResetButton;\n","/* eslint-disable react/jsx-boolean-value */\nimport React, { useState } from 'react';\nimport ReactModal from 'react-modal';\nimport '../styles/InfoButton.css';\n\nconst InfoButton = () => {\n  const [showModal, setShowModal] = useState(false);\n  const openInfo = () => {\n    setShowModal(true);\n  };\n\n  const closeInfo = () => {\n    setShowModal(false);\n  };\n\n  return (\n    <div className=\"info-container\">\n      <button type=\"button\" className=\"info\" onClick={openInfo}>\n        info\n      </button>\n      <ReactModal\n        isOpen={showModal}\n        shouldCloseOnOverlayClick={true}\n        shouldCloseOnEsc={true}\n        onRequestClose={closeInfo}\n        className=\"info-content\"\n        overlayClassName=\"info-overlay\"\n        portalClassName=\"info-portal\"\n      >\n        <h2>This is an implementation of Battleship</h2>\n        <p>\n          Battleship is a 2 player game where each player places an identical\n          set of ships onto a grid in whatever locations they choose. The\n          players then take turns \"attacking\" specific tiles on their opponent's\n          grid. When a tile that contains a section of a ship is attacked, that\n          section of ship is damaged. If all of a ship's sections are damaged\n          then that ship is sunk. The first player to sink all of their\n          opponent's ships wins.\n        </p>\n        <h3 className=\"info-left\">How to Play</h3>\n        <p className=\"info-left\">\n          First you must place your ships. You can drag them from their starting\n          tray (on the right) over to the grid on the left by dragging their\n          lighter colored end-tiles. You can also opt to use the appropriately\n          labeled \"randomize ships\" button. Rotating ships is done by clicking\n          on any part of a ship - provided the ship has clearance to rotate.\n        </p>\n        <p className=\"info-left\">\n          Once the game begins you simply click on any tile from your enemy's\n          grid to attack that tile. Your opponent will immediately counterattack\n          and the result of both attacks will be shown below the grid. If you\n          attempt to make a duplicate move, the game will reject it and wait for\n          a new move. The game will end once all of either player's ships have\n          been sunk. You may press the reset button at any time to start over.\n        </p>\n        <h3 className=\"info-right\">Your Opponent</h3>\n        <p className=\"info-left\">\n          This game of Battleship is played against an AI opponent. The AI knows\n          when it gets a hit and will probe the surrounding area trying to sink\n          the rest of your ship. Don't underestimate your opponent!\n        </p>\n        <button type=\"button\" className=\"info close-info\" onClick={closeInfo}>\n          close\n        </button>\n      </ReactModal>\n    </div>\n  );\n};\n\nexport default InfoButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/RandomButton.css';\n\nconst RandomButtom = (props) => {\n  const { randomShips } = props;\n  return (\n    <button type=\"button\" className=\"random\" onClick={randomShips}>\n      Randomize ships\n    </button>\n  );\n};\n\nRandomButtom.propTypes = {\n  randomShips: PropTypes.func,\n};\nexport default RandomButtom;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/MessageBox.css';\n\nconst MessageBox = (props) => {\n  const { playerResult, AIResult, gameOver } = props;\n  let box = null;\n  if (gameOver) {\n    box = (\n      <div className=\"message-container\">\n        <div className=\"game-over\">{gameOver}</div>\n      </div>\n    );\n  } else {\n    box = (\n      <div className=\"message-container\">\n        <div>Your move: {playerResult}</div>\n        <div>Opponent's move: {AIResult}</div>\n      </div>\n    );\n  }\n  return box;\n};\n\nMessageBox.propTypes = {\n  playerResult: PropTypes.string,\n  AIResult: PropTypes.string,\n  gameOver: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n};\n\nexport default MessageBox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/StartButton.css';\n\nconst StartButton = (props) => {\n  const { startGame } = props;\n  return (\n    <button type=\"button\" className=\"start\" onClick={startGame}>\n      Start\n      <br />\n      Game\n    </button>\n  );\n};\n\nStartButton.propTypes = {\n  startGame: PropTypes.func,\n};\nexport default StartButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport StartButton from './StartButton';\n// import ShipTile from './ShipTile';\nimport Battleship from './Battleship';\nimport '../styles/ShipTray.css';\n\nconst ShipTray = (props) => {\n  const { moveShip, rotateShip, trayShips, startGame } = props;\n  let tray = null;\n  const inTray = true;\n  if (trayShips.length > 0) {\n    tray = (\n      <div className=\"ship-tray\">\n        {trayShips.map((ship) => (\n          <Battleship\n            moveShip={moveShip}\n            rotateShip={rotateShip}\n            x={ship.x}\n            y={ship.y}\n            length={ship.length}\n            orientation={ship.orientation}\n            model={ship.model}\n            key={ship.model}\n            inTray={inTray}\n          />\n        ))}\n      </div>\n    );\n  } else {\n    tray = (\n      <div className=\"ship-tray empty\">\n        <StartButton startGame={startGame} />\n      </div>\n    );\n  }\n  return tray;\n};\n\nShipTray.propTypes = {\n  moveShip: PropTypes.func,\n  rotateShip: PropTypes.func,\n  trayShips: PropTypes.array,\n  startGame: PropTypes.func,\n};\n\nexport default ShipTray;\n","const Ship = (len) => {\n  const length = len;\n  let hp = length;\n\n  const getLength = () => length;\n  const getHP = () => hp;\n  const takeHit = () => {\n    if (hp > 0) {\n      return (hp -= 1);\n    }\n  };\n  const isSunk = () => {\n    if (hp === 0) {\n      return true;\n    }\n    return false;\n  };\n\n  return { getLength, getHP, takeHit, isSunk };\n};\n\nexport default Ship;\n","import Ship from './Ship';\n\nconst Gameboard = () => {\n  let ships = 0;\n  let tiles = [];\n  const shipCount = () => ships;\n  const checkShipLocation = (coords) => {\n    // check if the ship placement is valid\n    for (let i = 0; i < coords.length; i += 1) {\n      // first check if the requested ship placement is in bounds\n      if (\n        coords[i].x > 9 ||\n        coords[i].x < 0 ||\n        coords[i].y > 9 ||\n        coords[i].y < 0\n      ) {\n        return false;\n      }\n      // now check to make sure the new ship will not overlap an existing one\n      const duplicate = tiles.find(\n        (tile) => tile.x === coords[i].x && tile.y === coords[i].y\n      );\n      if (duplicate) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const addShip = (coords, model) => {\n    if (checkShipLocation(coords) === false) {\n      return false;\n    }\n\n    // checks have passed, lets actually add the ship\n    const s = Ship(coords.length);\n    ships += 1;\n    for (let i = 0; i < coords.length; i += 1) {\n      const tile = coords[i];\n      tile.type = 'ship';\n      tile.ship = s;\n      tile.model = model;\n      tiles = tiles.concat(tile);\n    }\n    return true;\n  };\n\n  const removeShip = (coords) => {\n    const tileCount = tiles.length;\n    for (let i = 0; i < coords.length; i += 1) {\n      tiles = tiles.filter(\n        (tile) => !(tile.x === coords[i].x && tile.y === coords[i].y)\n      );\n    }\n    if (tileCount > tiles.length) {\n      ships -= 1;\n    }\n  };\n\n  const removeModel = (model) => {\n    const tileCount = tiles.length;\n    tiles = tiles.filter((tile) => tile.model !== model);\n    if (tileCount > tiles.length) {\n      ships -= 1;\n    }\n  };\n\n  const markSunk = (model) => {\n    if (model === undefined) {\n      return;\n    }\n    tiles = tiles.map((tile) => {\n      if (tile.model === model) {\n        tile.type = 'sunk';\n      }\n      return tile;\n    });\n  };\n\n  const receiveAttack = (coord) => {\n    const attack = tiles.find(\n      (tile) => tile.x === coord.x && tile.y === coord.y\n    );\n    let sunk = false;\n\n    // this is a valid attack on a ship\n    if (attack && attack.type === 'ship') {\n      tiles = tiles.map((tile) => {\n        if (tile.x === coord.x && tile.y === coord.y) {\n          tile.type = 'hit';\n          tile.ship.takeHit();\n          sunk = tile.ship.isSunk();\n        }\n        return tile;\n      });\n      if (sunk) {\n        ships -= 1;\n        markSunk(attack.model);\n        return 'sunk';\n      }\n      return 'hit';\n    }\n\n    // the attack has already been made\n    if (attack) {\n      return 'invalid';\n    }\n\n    // the attack was out of bounds\n    if (coord.x > 9 || coord.x < 0 || coord.y > 9 || coord.y < 0) {\n      return 'invalid';\n    }\n\n    // this attack has not been made and it is a miss\n    coord.type = 'miss';\n    tiles = tiles.concat(coord);\n    return 'miss';\n  };\n\n  const getTiles = () => tiles;\n\n  return {\n    shipCount,\n    addShip,\n    checkShipLocation,\n    removeShip,\n    removeModel,\n    receiveAttack,\n    getTiles,\n  };\n};\n\nexport default Gameboard;\n","import Gameboard from './Gameboard';\n\nconst Game = () => {\n  let playerOneBoard = Gameboard();\n  let playerTwoBoard = Gameboard();\n  const playerOneShips = () => playerOneBoard.shipCount();\n  const playerTwoShips = () => playerTwoBoard.shipCount();\n\n  const placeShips = () => {\n    // place ships for both players\n    playerOneBoard.addShip([\n      { x: 1, y: 3 },\n      { x: 2, y: 3 },\n      { x: 3, y: 3 },\n    ]);\n    playerOneBoard.addShip([\n      { x: 5, y: 4 },\n      { x: 5, y: 5 },\n      { x: 5, y: 6 },\n      { x: 5, y: 7 },\n    ]);\n    playerTwoBoard.addShip([\n      { x: 1, y: 3 },\n      { x: 2, y: 3 },\n      { x: 3, y: 3 },\n    ]);\n    playerTwoBoard.addShip([\n      { x: 5, y: 4 },\n      { x: 5, y: 5 },\n      { x: 5, y: 6 },\n      { x: 5, y: 7 },\n    ]);\n  };\n\n  const checkGameOver = () => {\n    if (playerOneShips() < 1) {\n      return 'player 2 wins!';\n    }\n    if (playerTwoShips() < 1) {\n      return 'player 1 wins!';\n    }\n    return false;\n  };\n\n  const move = (player, coords) => {\n    let result = '';\n    // don't allow a move to be made if the game is over\n    if (checkGameOver()) {\n      return 'game over';\n    }\n\n    if (player === 1) {\n      result = playerTwoBoard.receiveAttack(coords);\n    } else if (player === 2) {\n      result = playerOneBoard.receiveAttack(coords);\n    }\n\n    // check if the game is over after every move and if so who won\n    // (if the game has ended as a result of a player's move that means they won)\n    if (checkGameOver() && player === 1) {\n      return 'player 1 wins';\n    }\n    if (checkGameOver() && player === 2) {\n      return 'player 2 wins';\n    }\n\n    return result;\n  };\n\n  const getPOneBoard = () => playerOneBoard.getTiles();\n\n  const getPTwoBoard = () => playerTwoBoard.getTiles();\n\n  const reset = () => {\n    playerOneBoard = Gameboard();\n    playerTwoBoard = Gameboard();\n  };\n\n  const resetPlayerOne = () => {\n    playerOneBoard = Gameboard();\n  };\n\n  const resetPlayerTwo = () => {\n    playerTwoBoard = Gameboard();\n  };\n  /*\n  smartMove assumes it will be called with a pair of random coordinates.\n\n  smartMove must consist of two if/else sections. \n  The first section decides what kind of attack to make.\n  The second section interprets the result of the attack.\n\n  smartMove must remember between calls:\n    - what direction it is checking\n    - what the last hit it got was\n    - what tile is it searching from\n\n  Phases of \"Smart Attacking\" (similar to what a human would do):\n  Random Phase (no direction set):\n  - attack randomly\n  - If you get a 'hit'\n    - set searchingFrom and recentHit to the coordinates you just attacked\n    - set direction to 'up' (move to the searching phase)\n  \n  Searching Phase (some direction set):\n  - start from your recent hit and attack the next tile in your direction\n  - If you get a 'sunk'\n    - reset direction, recentHit and searchingFrom (return to random phase)\n  - If you do not get a 'hit' (or 'sunk')\n    - this direction is now a dead end\n    - set recentHit to searchingFrom (resume search from the original hit)\n    - change direction down my arbitrary sequence (up > down > left > right)\n      - if the direction had been 'right'\n        - then we have checked all directions\n        - return to the random phase just like if we had gotten a 'sunk'\n  - If you get a 'hit'\n    - set the recentHit to the coordinates you just attacked\n\n  smartMove can be 'tricked' by placing ships directly adjacent to one another.\n  Consider two horizontally stacked ships.\n  A human may recognize that there were two adjacent ships. (by first probing vertically)\n  After sinking one they would go back for the other.\n  smartMove cannot go back to another ship that it 'stumbles upon'.\n  The amount of logic needed to prevent this is outside the scope of this project.\n  (yes I have thought a great deal about it)\n  */\n\n  const smartMove = (coords, direction, searchingFrom, recentHit) => {\n    let result = '';\n    const newCoords = coords;\n    let newDirection = direction;\n    let newSearching = searchingFrom;\n    let newRecent = recentHit;\n\n    if (direction === 'none') {\n      result = move(2, coords);\n    }\n    if (direction === 'up') {\n      Object.assign(newCoords, recentHit);\n      newCoords.y -= 1;\n      result = move(2, newCoords);\n    } else if (direction === 'down') {\n      Object.assign(newCoords, recentHit);\n      newCoords.y += 1;\n      result = move(2, newCoords);\n    } else if (direction === 'left') {\n      Object.assign(newCoords, recentHit);\n      newCoords.x -= 1;\n      result = move(2, newCoords);\n    } else if (direction === 'right') {\n      Object.assign(newCoords, recentHit);\n      newCoords.x += 1;\n      result = move(2, newCoords);\n    }\n\n    if (direction === 'none' && result === 'hit') {\n      Object.assign(newSearching, newCoords);\n      Object.assign(newRecent, newCoords);\n      newDirection = 'up';\n    } else if (result === 'sunk') {\n      newDirection = 'none';\n      newSearching = {};\n      newRecent = {};\n    } else if (direction !== 'none' && result !== 'hit') {\n      console.log(newDirection);\n      switch (direction) {\n        case 'up':\n          newDirection = 'down';\n          break;\n        case 'down':\n          newDirection = 'left';\n          break;\n        case 'left':\n          newDirection = 'right';\n          break;\n        case 'right':\n          // we have checked all directions, reset now\n          newDirection = 'none';\n          break;\n        default:\n          break;\n      }\n      Object.assign(newRecent, newSearching);\n    } else if (result === 'hit') {\n      Object.assign(newRecent, newCoords);\n    }\n    // console.log(newCoords);\n    return { result, newDirection, newSearching, newRecent, newCoords };\n  };\n\n  const addShip = (player, coords, model = '') => {\n    let result = null;\n    if (player === 1) {\n      result = playerOneBoard.addShip(coords, model);\n    } else if (player === 2) {\n      result = playerTwoBoard.addShip(coords, model);\n    }\n    return result;\n  };\n\n  const removeShip = (player, coords) => {\n    if (player === 1) {\n      playerOneBoard.removeShip(coords);\n    } else if (player === 2) {\n      playerTwoBoard.removeShip(coords);\n    }\n  };\n\n  const removeShipModel = (player, model) => {\n    if (player === 1) {\n      playerOneBoard.removeModel(model);\n    } else if (player === 2) {\n      playerTwoBoard.removeModel(model);\n    }\n  };\n\n  const checkLocation = (player, coords) => {\n    if (player === 1) {\n      return playerOneBoard.checkShipLocation(coords);\n    }\n    if (player === 2) {\n      return playerTwoBoard.checkShipLocation(coords);\n    }\n  };\n\n  return {\n    placeShips,\n    addShip,\n    removeShip,\n    removeShipModel,\n    checkLocation,\n    playerOneShips,\n    playerTwoShips,\n    move,\n    checkGameOver,\n    smartMove,\n    getPOneBoard,\n    getPTwoBoard,\n    reset,\n    resetPlayerOne,\n    resetPlayerTwo,\n  };\n};\n\nexport default Game;\n","const SetupShips = () => {\n  // the ship orientations are randomly determined\n  const orientations = ['horizontal', 'vertical'];\n  const ships = [\n    {\n      x: -1,\n      y: -1,\n      length: 2,\n      orientation: orientations[Math.round(Math.random())],\n      model: 'patrol',\n    },\n    {\n      x: -1,\n      y: -1,\n      length: 3,\n      orientation: orientations[Math.round(Math.random())],\n      model: 'submarine',\n    },\n    {\n      x: -1,\n      y: -1,\n      length: 3,\n      orientation: orientations[Math.round(Math.random())],\n      model: 'destroyer',\n    },\n    {\n      x: -1,\n      y: -1,\n      length: 4,\n      orientation: orientations[Math.round(Math.random())],\n      model: 'battler',\n    },\n    {\n      x: -1,\n      y: -1,\n      length: 5,\n      orientation: orientations[Math.round(Math.random())],\n      model: 'carrier',\n    },\n  ];\n\n  return ships;\n};\n\nexport default SetupShips;\n","import React, { useState, useRef } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport Grid from './components/Grid';\nimport PlacementGrid from './components/PlacementGrid';\nimport ResetButton from './components/ResetButton';\nimport InfoButton from './components/InfoButton';\nimport RandomButtom from './components/RandomButton';\nimport MessageBox from './components/MessageBox';\nimport ShipTray from './components/ShipTray';\nimport Game from './modules/Game';\nimport SetupShips from './modules/SetupShips';\nimport './styles/normalize.css';\nimport './styles/App.css';\n\nconst App = () => {\n  const [game] = useState(Game());\n  const [playerOneBoard, setPlayerOneBoard] = useState(game.getPOneBoard());\n  const [playerTwoBoard, setPlayerTwoBoard] = useState(game.getPTwoBoard());\n  const [placing, setPlacing] = useState(true);\n  const [trayShips, setTrayShips] = useState(SetupShips());\n  const [gridShips, setGridShips] = useState([]);\n  const [playerResult, setPlayerResult] = useState('');\n  const [AIResult, setAIResult] = useState('');\n  const [gameOver, setGameOver] = useState(false);\n  const [AIDirection, setAIDirection] = useState('none');\n  const [AISearchingFrom, setAISearchingFrom] = useState({});\n  const [AIRecentHit, setAIRecentHit] = useState({});\n  const [recentX, setRecentX] = useState(-1);\n  const [recentY, setRecentY] = useState(-1);\n  const trayRef = useRef();\n  const gridRef = useRef();\n  trayRef.current = trayShips;\n  gridRef.current = gridShips;\n\n  const directionRef = useRef();\n  const searchingRef = useRef();\n  const recentRef = useRef();\n  directionRef.current = AIDirection;\n  searchingRef.current = AISearchingFrom;\n  recentRef.current = AIRecentHit;\n\n  const getRandomCoordinates = () => {\n    const x = Math.floor(Math.random() * 10);\n    const y = Math.floor(Math.random() * 10);\n    return { x, y };\n  };\n\n  const attack = (e, player, coords) => {\n    e.preventDefault();\n    let result = '';\n    let aiResult = {\n      result: AIResult,\n      newDirection: AIDirection,\n      newSearching: searchingRef.current,\n      newRecent: recentRef.current,\n      newCoords: {\n        x: recentX,\n        y: recentY,\n      },\n    };\n    if (!gameOver) {\n      result = game.move(player, coords);\n    }\n    if (result !== 'invalid' && !gameOver) {\n      do {\n        if (\n          aiResult?.result === 'invalid' &&\n          aiResult.newDirection === 'down'\n        ) {\n          aiResult = game.smartMove(\n            getRandomCoordinates(),\n            'down',\n            searchingRef.current,\n            recentRef.current\n          );\n        } else if (\n          aiResult?.result === 'invalid' &&\n          aiResult.newDirection === 'left'\n        ) {\n          aiResult = game.smartMove(\n            getRandomCoordinates(),\n            'left',\n            searchingRef.current,\n            recentRef.current\n          );\n        } else if (\n          aiResult?.result === 'invalid' &&\n          aiResult.newDirection === 'right'\n        ) {\n          aiResult = game.smartMove(\n            getRandomCoordinates(),\n            'right',\n            searchingRef.current,\n            recentRef.current\n          );\n        } else if (\n          aiResult?.result === 'invalid' &&\n          aiResult.newDirection === 'none'\n        ) {\n          aiResult = game.smartMove(\n            getRandomCoordinates(),\n            'none',\n            searchingRef.current,\n            recentRef.current\n          );\n        } else {\n          aiResult = game.smartMove(\n            getRandomCoordinates(),\n            directionRef.current,\n            searchingRef.current,\n            recentRef.current\n          );\n        }\n      } while (aiResult.result === 'invalid');\n    } else if (!gameOver) {\n      result = 'invalid - select a new target';\n    } else {\n      result = game.checkGameOver();\n      aiResult.result = game.checkGameOver();\n    }\n\n    const gameOverStatus = game.checkGameOver();\n\n    const newX = aiResult.newCoords.x;\n    const newY = aiResult.newCoords.y;\n    setRecentX(newX);\n    setRecentY(newY);\n    setGameOver(gameOverStatus);\n    setPlayerResult(result);\n    setAIResult(aiResult.result);\n    setAIDirection(aiResult.newDirection);\n    setAISearchingFrom(aiResult.newSearching);\n    setAIRecentHit(aiResult.newRecent);\n    setPlayerOneBoard(game.getPOneBoard());\n    setPlayerTwoBoard(game.getPTwoBoard());\n  };\n\n  const buildShip = (shipData) => {\n    const { x, y, length, orientation } = shipData;\n    const ship = [];\n    let tempX = 0;\n    let tempY = 0;\n    for (let i = 0; i < length; i += 1) {\n      if (orientation === 'horizontal') {\n        tempX = x + i;\n        tempY = y;\n      } else {\n        tempX = x;\n        tempY = y + i;\n      }\n      ship.push({ x: tempX, y: tempY });\n    }\n    return ship;\n  };\n\n  /*\n  the ship must be either in the grid or the tray\n  we must find it so we can know its current orientation\n  */\n  const getOrientation = (model) => {\n    const inGrid = gridRef.current.find((s) => s.model === model);\n    const inTray = trayRef.current.find((s) => s.model === model);\n    if (!!inGrid === true && !!inTray === false) {\n      return inGrid.orientation;\n    }\n    if (!!inGrid === false && !!inTray === true) {\n      return inTray.orientation;\n    }\n  };\n\n  /*\n  identical to the above function but returns a built ship instead\n  not DRY but i prefer doing this over making one overly if/else-y function\n  if this becomes a problem i can still do that without much trouble at this scale\n  */\n  const getShipByModel = (model) => {\n    const inGrid = gridRef.current.find((s) => s.model === model);\n    const inTray = trayRef.current.find((s) => s.model === model);\n    if (!!inGrid === true && !!inTray === false) {\n      return buildShip(inGrid);\n    }\n    if (!!inGrid === false && !!inTray === true) {\n      return buildShip(inTray);\n    }\n  };\n\n  const moveShip = (x, y, item) => {\n    const { length, model } = item;\n    const temp = { x, y, length, model };\n\n    // find the current orientation so we can know how we should place it\n    temp.orientation = getOrientation(model);\n\n    // remove this ship from the tray now that it is going in the grid\n    setTrayShips((prevShips) =>\n      prevShips.filter((ship) => ship.model !== model)\n    );\n\n    // remove this ship from the grid if it is already here\n    // then add it in its new location\n    setGridShips((prevShips) =>\n      prevShips.filter((s) => s.model !== temp.model)\n    );\n    setGridShips((prevShips) => prevShips.concat(temp));\n\n    // remove the ship from the game board (in case it was already in the grid)\n    // (does nothing if it was not in the grid)\n    game.removeShipModel(1, temp.model);\n\n    // build the ship's coordinate array so we can add it to the board\n    const tempShip = buildShip(temp);\n\n    // and add it back to the board so its new location will be up to date\n    game.addShip(1, tempShip, temp.model);\n    setPlayerOneBoard(game.getPOneBoard());\n  };\n\n  /*\n  look for the ship in gridShips and trayShips\n  change its orientation wherever you find it\n  update both states\n  */\n  const rotateShip = (e, model) => {\n    e.preventDefault();\n    const tempTray = trayShips.map((s) => {\n      if (s.model === model && s.orientation === 'horizontal') {\n        s.orientation = 'vertical';\n      } else if (s.model === model && s.orientation === 'vertical') {\n        s.orientation = 'horizontal';\n      }\n      return s;\n    });\n\n    /*\n    Ships that are already in the grid need to check if their rotation is valid\n    This necessitates a bit more logic\n    */\n\n    // find the ship we are going to rotate and preserve its location/orientation\n    const tempGrid = gridShips;\n    let tempShip = tempGrid.find((s) => s.model === model);\n    if (!tempShip) {\n      tempShip = tempTray.find((s) => s.model === model);\n    }\n    // we will need these later if the rotation ends up being rejected\n    const originalOrientation = tempShip.orientation;\n    const originalShip = buildShip(tempShip);\n\n    // lets see what this rotation would look like so we can check its validity\n    if (tempShip.orientation === 'horizontal') {\n      tempShip.orientation = 'vertical';\n    } else if (tempShip.orientation === 'vertical') {\n      tempShip.orientation = 'horizontal';\n    }\n    const potentialRotation = buildShip(tempShip);\n\n    // remove the ship (otherwise the rotation will be rejected for overlap)\n    game.removeShipModel(1, model);\n    if (game.checkLocation(1, potentialRotation) === true) {\n      // potential rotation accepted, add the ship\n      game.addShip(1, potentialRotation, model);\n    } else {\n      // rotation rejected - return the orientation to what it started as and re-add\n      tempShip.orientation = originalOrientation;\n      game.addShip(1, originalShip, model);\n    }\n\n    setTrayShips(tempTray);\n    setGridShips(tempGrid);\n    setPlayerOneBoard(game.getPOneBoard());\n  };\n\n  /*\n  Ships cannot overlap!\n  */\n  const canDropShip = (x, y, item) => {\n    const { length, model } = item;\n    const temp = { x, y, length, model };\n    temp.orientation = getOrientation(model);\n    const potentialShip = buildShip(temp);\n    const originalShip = getShipByModel(model);\n    /*\n    have to remove the ship from the set of occupied tiles before checking for \n    placement validity or else we might be rejected because the spot we are \n    moving to was occupied by this same ship before\n    also have to re-add the ship or else attempting to make an invalid drop with \n    a ship will allow other ships to be placed over it\n    */\n    game.removeShipModel(1, temp.model);\n    const result = game.checkLocation(1, potentialShip);\n    game.addShip(1, originalShip, model);\n    return result;\n  };\n\n  const reset = () => {\n    game.reset();\n    setPlayerOneBoard(game.getPOneBoard());\n    setPlayerTwoBoard(game.getPTwoBoard());\n    setTrayShips(SetupShips());\n    setGridShips([]);\n    setPlacing(true);\n    setGameOver(false);\n    setPlayerResult('');\n    setAIResult('');\n    setRecentX(-1);\n    setRecentY(-1);\n  };\n\n  /*\n  Called by randomShips to get the locations to move things to but extracted\n  into its own function so it can also be called to randomly place the AI's ships\n  Returns the data (not all the coordinates) of the ships that were generated\n\n  clear the player's game board\n  for each ship, randomize its orientation and x, y\n  try to add the ship to the appropriate player's board\n  if you get a failed message generate a new orientation and x, y\n  */\n  const setRandomShipLocations = (player) => {\n    if (player === 1) {\n      game.resetPlayerOne();\n    } else if (player === 2) {\n      game.resetPlayerTwo();\n    }\n    // set the basic data for the ships that will not change\n    const orientations = ['horizontal', 'vertical'];\n    const ships = [\n      { length: 2, model: 'patrol' },\n      { length: 3, model: 'submarine' },\n      { length: 3, model: 'destroyer' },\n      { length: 4, model: 'battler' },\n      { length: 5, model: 'carrier' },\n    ];\n    const addedShips = [];\n    for (let i = 0; i < ships.length; i += 1) {\n      let notAdded = true;\n      do {\n        // randomly set each ship's starting coordinates and orientation\n        const coords = getRandomCoordinates();\n        ships[i].x = coords.x;\n        ships[i].y = coords.y;\n        ships[i].orientation = orientations[Math.round(Math.random())];\n        // now build a ship coordinate array (addShip expects this)\n        const tempShip = buildShip(ships[i]);\n        // try to add the ship\n        // if it fails notAdded is set to false so we reverse it to loop again\n        // it it succeeds notAdded is set to true so we reverse it and don't loop again\n        notAdded = !game.addShip(player, tempShip, ships[i].model);\n      } while (notAdded);\n      addedShips.push(ships[i]);\n    }\n    return addedShips;\n  };\n\n  /*\n  Assigns random locations for each ship, clears the tray and moves the ships\n  to their assigned locations\n  */\n  const randomShips = () => {\n    const randomizedShips = setRandomShipLocations(1);\n    setTrayShips([]);\n    setGridShips(randomizedShips);\n    // set the game boards\n    setPlayerOneBoard(game.getPOneBoard());\n    setPlayerTwoBoard(game.getPTwoBoard());\n  };\n\n  const startGame = () => {\n    setPlacing(false);\n    setRandomShipLocations(2);\n    setPlayerTwoBoard(game.getPTwoBoard());\n    // keeping this on to make testing easier\n    // *** must remove before full release ***\n    console.log(game.getPTwoBoard());\n  };\n\n  let screen = null;\n\n  if (placing) {\n    screen = (\n      <DndProvider backend={HTML5Backend}>\n        <main>\n          <ul className=\"tray-info\">\n            <li>click to rotate</li>\n            <li>use the lighter-colored squares to drag and drop</li>\n          </ul>\n          <ShipTray\n            moveShip={moveShip}\n            rotateShip={rotateShip}\n            trayShips={trayShips}\n            startGame={startGame}\n          />\n          <h2 className=\"friendly-heading\">place your ships</h2>\n          {/* <Grid\n            player={1}\n            name=\"friendly\"\n            tileSet={playerOneBoard}\n            moveShip={moveShip}\n          /> */}\n          <PlacementGrid\n            moveShip={moveShip}\n            rotateShip={rotateShip}\n            gridShips={gridShips}\n            canDropShip={canDropShip}\n          />\n          <ResetButton reset={reset} />\n          <InfoButton />\n          <RandomButtom randomShips={randomShips} />\n        </main>\n      </DndProvider>\n    );\n  } else {\n    screen = (\n      <DndProvider backend={HTML5Backend}>\n        <main>\n          <h2 className=\"enemy-heading\">enemy waters</h2>\n          <Grid\n            player={1}\n            name=\"enemy\"\n            tileSet={playerTwoBoard}\n            attack={attack}\n          />\n          <h2 className=\"friendly-heading\">friendly waters</h2>\n          <Grid\n            player={1}\n            name=\"friendly\"\n            tileSet={playerOneBoard}\n            recentX={recentX}\n            recentY={recentY}\n          />\n          <MessageBox\n            playerResult={playerResult}\n            AIResult={AIResult}\n            gameOver={gameOver}\n          />\n          <ResetButton reset={reset} />\n          <InfoButton />\n        </main>\n      </DndProvider>\n    );\n  }\n  return screen;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}